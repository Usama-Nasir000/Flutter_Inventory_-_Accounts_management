type SalesOrder {
  sales_order_id: Int
  customerid: Int
  display_name: String
  sales_description: String
  order_date: String
  expected_date: String
  currency: String
  amount: Float
  total_discount: Float
  payment_due: String
  sales_items: [SalesOrderQuantity!]
}

type SalesOrderQuantity {
  item_id: Int
  item_name: String
  sold_quantity: Int
  item_price: Float
  item_discount: Float
}

type SelectedCustomer {
  customerid: Int
  display_name: String
}

input SalesOrderInput {
  sales_order_id: Int
  userid:Int
  customerid: Int
  display_name: String
  sales_description: String
  order_date: String
  expected_date: String
  currency: String
  amount: Float
  total_discount: Float
  payment_due: String
  sales_items: [SalesOrderQuantityInput]
}

input SalesOrderQuantityInput {
  item_id: Int
  item_name: String
  sold_quantity: Int
  item_price: Float
  item_discount: Float
}

input SelectedCustomerInput {
  customerid: Int
  customer_name: String
}

type GetSalesOrderResponse {
  code: Int
  status: String
  data: SalesOrder
}

type GetSalesOrderListResponse {
  code: Int
  status: String
  count:Int
  data: [SalesOrder]
}

type Query {
  getSalesOrders: GetSalesOrderListResponse
  getSalesOrder(id: ID!): GetSalesOrderResponse
}

type SalesOrderResponse{
  code: Int
  status: String
  id: Int
  data: SaveSalesOrderData
}

type SaveSalesOrderData{
  salesOrder: SalesOrder
  salesItems: [SalesOrderQuantity!]
}

type Mutation {
  saveSalesOrder(input: SalesOrderInput): SalesOrderResponse
}