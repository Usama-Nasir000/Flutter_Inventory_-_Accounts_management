type BillingAddress {
  address: String
  city: String
  zip: Float
  state: String
  country: String
}

type ShippingAddress {
  address: String
  city: String
  zip: Float
  state: String
  country: String
}

type Vendor {
  # id: ID
  userid: Int
  vendorid: Int
  vendor_name: String
  first_name: String
  middle_name: String
  last_name: String
  type: String
  category: String
  email: String
  work_phone: String
  phone: String
  billing_address: BillingAddress
  shipping_address: ShippingAddress
  vendor_contact_person: VendorContactPerson
}
type VendorContactPerson{
  contact_first_name: String
  contact_last_name: String
  contact_email: String
  contact_phone: String
  contact_job_role: String
}

input VendorContactPersonInput {
  contact_first_name: String
  contact_last_name: String
  contact_email: String
  contact_phone: String
  contact_job_role: String
}

input BillingAddressInput {
  address: String
  city: String
  zip: Float
  state: String
  country: String
}

input ShippingAddressInput {
  address: String
  city: String
  zip: Float
  state: String
  country: String
}

type getVendorResponse {
  # code: Int
  # status: String
  data: Vendor
}

type getVendorListResponse {
  # code: Int
  # status: String
  # count: Int
  data: [Vendor]
}

type Query {
  getVendors: getVendorListResponse
  # getVendor(id: ID!): getVendorsResponse
  getVendor(vendorid: Int!): getVendorResponse

}

type Mutation {
  saveVendor(
    userid: Int
    vendorid: Int
    vendor_name: String!
    firstname: String
    middlename: String
    lastname: String
    vendor_type: String
    category: String
    email: String
    work_phone: String
    phone: String
    billing_address: BillingAddressInput
    shipping_address: ShippingAddressInput
    vendor_contact_person: VendorContactPersonInput
  ): Vendor
}
